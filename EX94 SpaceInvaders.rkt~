;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname |EX94 SpaceInvaders|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/image)
(require 2htdp/universe)
(require racket/math)

(define GAMESPEED 2)
(define SCNHGT 800)
(define SCNWDT 800)
(define MTSCN (empty-scene SCNWDT SCNHGT))
(define DESCENT-SPEED (* GAMESPEED 1))
(define MISSILE-SPEED (* GAMESPEED 3))
(define TICK 1)


(define-struct tank [x spd])
(define-struct ufo [x y spd])
(define-struct missile [x y active])
(define-struct bomb [x y])
(define-struct ws [tank ufo missile bomb tick])

;***Predicates for above structs
;Any - boolean

(define (ws-or-not? ws) (and (tank-or-not? (tank-x (ws-tank ws)) (tank-spd (ws-tank ws)))
                             (ufo-or-not? (ufo-x (ws-ufo ws)) (ufo-y (ws-ufo ws)) (ufo-spd (ws-ufo ws)))
                             (missile-or-not? (missile-x (ws-missile ws)) (missile-y (ws-missile ws)) (missile-active (ws-missile ws)))
                             (bomb-or-not? (bomb-x (ws-bomb ws)) (bomb-y (ws-bomb ws)))))
(check-expect (ws-or-not? (make-ws (make-tank 5 5) (make-ufo 4 4 6) (make-missile 7 7 #true) (make-bomb 5 5) 10)) #true)
;(check-expect (ws-or-not (tank-or-not? -5 5) (ufo-or-not? 2 4 6) (missile-or-not? 5 3 #true) (bomb-or-not? 6 6)) #false)
;(check-expect (ws-or-not (tank-or-not? 5 5) (ufo-or-not? 2 4 -6) (missile-or-not? 5 3 #true) (bomb-or-not? 6 6)) #false)
;(check-expect (ws-or-not (tank-or-not? 5 5) (ufo-or-not? 2 4 6) (missile-or-not? 5 3 #false) (bomb-or-not? 6 6)) #false)
;(check-expect (ws-or-not (tank-or-not? 5 5) (ufo-or-not? 2 4 6) (missile-or-not? 5 3 #true) (bomb-or-not? 6 -6)) #false)


(define (bomb-or-not? x y) (and (number? x) (number? y) (> x 0) (> y 0)))
(check-expect (bomb-or-not? 1 1) #true)
(check-expect (bomb-or-not? -12 12) #false)
(check-expect (bomb-or-not? 1 -1) #false)
(check-expect (bomb-or-not? "good" 1) #false)
(check-expect (bomb-or-not? 1 "bad") #false)

(define (missile-or-not? x y active) (and (number? x) (number? y) (>= x 0) (>= y 0) (boolean? active)))
(check-expect (missile-or-not? 1 2 #true) #true)               
(check-expect (missile-or-not? 1 2 #false) #true)
(check-expect (missile-or-not? -1 2 #true) #false)
(check-expect (missile-or-not? 1 -2 #true) #false)

  
(define (tank-or-not? x spd) (and (number? x) (> x 0) (number? spd)))
(check-expect (tank-or-not? 1 5) #true)
(check-expect (tank-or-not? -1 5) #false)
(check-expect (tank-or-not? 1 -5) #true)
(check-expect (tank-or-not? "blah" 5) #false)
(check-expect (tank-or-not? -1 "red") #false)



(check-expect (ufo-or-not? 3 3 3) #true)
(check-expect (ufo-or-not? 3 "boo" 3) #false)
(check-expect (ufo-or-not? -3 3 3) #false)
(check-expect (ufo-or-not? 3 -3 3) #false)
(check-expect (ufo-or-not? 3 3 -3) #true)
(define (ufo-or-not? x y spd)
  (cond
    [(and (number? x) (number? y) (number? spd) (>= x 0) (>= y 0)) #true]
    [else false]))


(define UFO (overlay (rectangle 88 8 "solid" "black") (circle 40 "solid" "green")))
(define TANK (overlay/offset (rectangle 4 15 "solid" "black") 0 15 (rectangle 40 15 "solid" "black")))
(define MISSILE (rectangle 2 20 "solid" "black"))
(define BOMB (rectangle 2 20 "solid" "green"))

;***RIGHTLIMIT
;scn and image widths (number)-> number
(define RUFOLIMIT (- SCNWDT (/ (image-width UFO) 2)))
(define LUFOLIMIT (/ (image-width UFO) 2))
(define RTANKLIMIT (- SCNWDT (/ (image-width TANK) 2)))
(define LTANKLIMIT (/ (image-width TANK) 2))
(define TANKY (- SCNHGT 40))


;***tank-mover
; tank -> tank
; each tick, tank-x has spd added to it.
; if tank-x outside of range, tank-x=20 or tank-x=780 and tank-spd=0.
; if distance to limit is less than the approaching speed, speed becomes distance to limit.
(define (tank-mover tank)
  (cond
    [(and (> (tank-spd tank) 0) (< (tank-x tank) (- RTANKLIMIT (tank-spd tank)))) (make-tank (+ (tank-x tank) (tank-spd tank)) (tank-spd tank))]
    [(and (< (tank-spd tank) 0) (> (tank-x tank) (- LTANKLIMIT (tank-spd tank)))) (make-tank (+ (tank-x tank) (tank-spd tank)) (tank-spd tank))]
    [(and (> (tank-spd tank) 0) (>= (tank-x tank) (- RTANKLIMIT (tank-spd tank)))) (make-tank RTANKLIMIT 0)]
    [(and (< (tank-spd tank) 0) (<= (tank-x tank) (- LTANKLIMIT (tank-spd tank)))) (make-tank LTANKLIMIT 0)]
    [else (make-tank (tank-x tank) 0)]))
(check-expect (tank-mover (make-tank 100 5)) (make-tank 105 5))
(check-expect (tank-mover (make-tank RTANKLIMIT 5)) (make-tank RTANKLIMIT 0))
(check-expect (tank-mover (make-tank LTANKLIMIT -5)) (make-tank LTANKLIMIT 0))
(check-expect (tank-mover (make-tank RTANKLIMIT 1)) (make-tank RTANKLIMIT 0))
(check-expect (tank-mover (make-tank LTANKLIMIT -1)) (make-tank LTANKLIMIT 0))
(check-expect (tank-mover (make-tank 100 -3)) (make-tank 97 -3))
(check-expect (tank-mover (make-tank (- RTANKLIMIT 3) 5)) (make-tank RTANKLIMIT 0))
(check-expect (tank-mover (make-tank (+ LTANKLIMIT 1) -3)) (make-tank LTANKLIMIT 0))
(check-expect (tank-mover (make-tank (+ LTANKLIMIT 3) -5)) (make-tank LTANKLIMIT 0))


;***new-tank-speed
; ke tank -> tank
; speed can be 1, 2, 3 or 5 in each direction.
; can't go beyond range of 20-780
; 
; with each arrow key press in one direction, the tank speeds up.
; if going left at speeds 1, 2, or 3, pressing right makes it stop.
; if going left at speed 5, pressing right drops it to 2.
; if tank-x = RTANKLIMIT and pressing right, speed =0
; if tank-x = LTANKLIMIT and pressing left, speed =0
(check-expect (new-tank-speed (make-tank 100 0) "left") -1) 
(check-expect (new-tank-speed (make-tank 100 -1) "left") -2)
(check-expect (new-tank-speed (make-tank 100 -3) "left") -5)
(check-expect (new-tank-speed (make-tank 100 -5) "left") -7)
(check-expect (new-tank-speed (make-tank 100 1) "left") 0)
(check-expect (new-tank-speed (make-tank 100 3) "left") 0)
(check-expect (new-tank-speed (make-tank 100 5) "left") 2)
(check-expect (new-tank-speed (make-tank 100 0) "right") 1)
(check-expect (new-tank-speed (make-tank 100 1) "right") 2)
(check-expect (new-tank-speed (make-tank 100 2) "right") 3)
(check-expect (new-tank-speed (make-tank 100 3) "right") 5)
(check-expect (new-tank-speed (make-tank 100 -1) "right") 0)
(check-expect (new-tank-speed (make-tank 100 -3) "right") 0)
(check-expect (new-tank-speed (make-tank 100 -5) "right") -2)
(check-expect (new-tank-speed (make-tank RTANKLIMIT -5) "right") 0)
(check-expect (new-tank-speed (make-tank RTANKLIMIT -1) "right") 0)
(check-expect (new-tank-speed (make-tank RTANKLIMIT 0) "left") -1)
(check-expect (new-tank-speed (make-tank RTANKLIMIT 1) "left") 0)
(check-expect (new-tank-speed (make-tank LTANKLIMIT 0) "right") 1)
(check-expect (new-tank-speed (make-tank LTANKLIMIT 1) "right") 2)
(check-expect (new-tank-speed (make-tank LTANKLIMIT -1) "left") 0)
(check-expect (new-tank-speed (make-tank LTANKLIMIT -5) "left") 0)

(define (new-tank-speed tank ke)
  (cond
    [(and (< LTANKLIMIT (tank-x tank)) (string=? ke "left")) (laccelerator (tank-spd tank))]
    [(and (< (tank-x tank) RTANKLIMIT) (string=? ke "right")) (raccelerator (tank-spd tank))]
    [else 0]))

;***laccelerator
;spd -> spd
;addresses tank speed when left button is pressed.
(define (laccelerator spd)
  (cond
  [(<= -2 spd 0) (- spd 1)]
  [(<= 5 spd) 2]
  [(<= 1 spd 3) 0]
  [(<= spd -3) (- spd 2)]))

;***raccelerator
;spd -> spd
;addresses tank speed when right button is pressed.
(define (raccelerator spd)
  (cond
    [(>= -5 spd) -2]
    [(<= -3 spd -1) 0]
    [(<= 0 spd 2) (+ spd 1)]
    [(>= spd 3) (+ spd 2)]))



;***random-accelerator (rnd)
;void -> int (-2 thru 2)
;every 10 ticks, the ufo changes speed. This returns that acceleration at those moments, and 0 otherwise
(define (rnd tick)
  (cond
    [(= (modulo tick 10) 0) (- (random 5) 2)]
    [else 0])) 

;;(check-random (rnd 10) (- (random 5) 2))
;(check-random (rnd 9) 0)
    

;***ufo-accelerator
;
;spd -> spd (int)
; every 10 ticks, x spd is changed randomly.
; it starts at 0
; randomly, it generates -2, -1, 0, 1 or 2. This value is added to the spdv
; the spd max is 5, and if 6 or 7 is generated, 2 is subtracted from the current speed. (or added, if -6 or -7)
(define (ufo-accelerator spd accel)
       (cond 
         [(> (+ spd accel) 10) (- spd 2)]
         [(< (+ spd accel) -10) (+ spd 2)]
         [else (+ spd accel)]))

(check-expect (ufo-accelerator -2 0) -2)
(check-expect (ufo-accelerator -4 -2) -6)
(check-expect (ufo-accelerator 5 2) 7)
(check-expect (ufo-accelerator -5 -2) -7)
(check-expect (ufo-accelerator 1 3) 4)

;***ufo-mover
; ufo-x ufo-y ufo-spd -> ufo
; if the range exceeds 20-780, it is given a speed of +-2, headed back toward the middle
; and x is set to the 20 or 780.
; The speed is added to x at each tick.
; The y motion drops at DESCENT-SPEED (constant)
(define (ufo-mover x y spd)
  (cond
    [(>= (+ x spd) RUFOLIMIT) (make-ufo RUFOLIMIT (+ y DESCENT-SPEED) -2)]
    [(<= (+ x spd) LUFOLIMIT) (make-ufo LUFOLIMIT (+ y DESCENT-SPEED)  2)]
    [else (make-ufo (+ x spd) (+ y DESCENT-SPEED) spd)]))

(check-expect (ufo-mover 200 500 3) (make-ufo 203 (+ 500 DESCENT-SPEED) 3))
(check-expect (ufo-mover (- RUFOLIMIT 2) 500 3) (make-ufo RUFOLIMIT (+ 500 DESCENT-SPEED) -2))
(check-expect (ufo-mover (+ LUFOLIMIT 5) 500 -5) (make-ufo LUFOLIMIT (+ 500 DESCENT-SPEED) 2))

;starmaker
;***missile mover
;missile -> missile
(define (missile-mover missile)
  (cond
    [(not (missile-active missile)) (make-missile 0 0 #false)] 
    [(= (missile-y missile) 100) (make-missile 0 0 #false)] 
    [else (make-missile (missile-x missile)
                        (- (missile-y missile) MISSILE-SPEED)
                        #true)]))

;bomb ufo -> bomb
(define (bomb-mover bomb ufo)
    (cond
    [(>= (bomb-y bomb) (- SCNHGT 10)) (make-bomb (ufo-x ufo) (ufo-y ufo))] 
    [else (make-bomb (bomb-x bomb)
                        (+ (bomb-y bomb) MISSILE-SPEED))]))

(check-expect (bomb-mover (make-bomb 100 SCNHGT) (make-ufo 400 400 0))
	(make-bomb 400 400))
(check-expect (bomb-mover (make-bomb 500 500) (make-ufo 400 400 0))
	(make-bomb 500 (+ 500 MISSILE-SPEED)))

;***update-tick
;each tick, the ws is updated in all aspects: tank, missile, ufo, bomb, tick
(define (update-tick ws)
  (make-ws
   (tank-mover (ws-tank ws))
   (ufo-mover (ufo-x (ws-ufo ws))
              (ufo-y (ws-ufo ws))
              (ufo-accelerator (ufo-spd (ws-ufo ws)) (rnd (ws-tick ws))))
   (missile-mover (ws-missile ws))
   (bomb-mover (ws-bomb ws) (ws-ufo ws))
   (+ 1 (ws-tick ws))))
   
             
;(check-expect (update-tick (make-ws (make-tank 100 3)
;                                    (make-ufo 100 200 2)
;                                    (make-missile 100 850 #true)
;                                    (make-bomb 100 250)
;                                    0))
;              (make-ws 
;              (make-tank 103 3)
;              (make-ufo 102 (+ 200 DESCENT-SPEED) 2)
;              (make-missile 100 847 #true)
;              (make-bomb 100 253)
;              1))

;***update-key
;ws -> ws
;method updates on any valid keystroke: left, right, space
(define (update-key ws ke)
	(cond 
	[(or (string=? ke "left") (string=? ke "right"))
		(make-ws
			(make-tank (tank-x (ws-tank ws)) 
				(new-tank-speed (ws-tank ws) ke))
			(ws-ufo ws)
			(ws-missile ws)
			(ws-bomb ws)
			(ws-tick ws))]
	[(string=? ke " ")
		(make-ws
			(ws-tank ws)
			(ws-ufo ws)
			(make-missile 	(tank-x (ws-tank ws))
							TANKY
							#true)
			(ws-bomb ws)
			(ws-tick ws))]
        [else ws] ))

;***which-render
;ws-> image
;method called by bigbang which then calls one of 2 rendering methods
;
(define (which-render ws)
	(cond
		[(missile-active (ws-missile ws)) (render-missile ws)]
		[(not (missile-active (ws-missile ws))) (render-no-missile ws)]))

;render
;ufo tank bomb missile-> image
;places ufo, tank, bomb(if active) and missile(if active) on MTSCN
;(define-struct ws [tank ufo missile bomb tick])
(define (render-missile ws)

   (place-image
       BOMB
       (bomb-x (ws-bomb ws))
       (bomb-y (ws-bomb ws))
    (place-image
 	  MISSILE
  		(missile-x (ws-missile ws))
  		(missile-y (ws-missile ws))
    (place-image
     UFO
            (ufo-x (ws-ufo ws))
            (ufo-y (ws-ufo ws))
    (place-image
      TANK
      (tank-x (ws-tank ws)) 
      TANKY
      MTSCN)))))
  
(define (render-no-missile ws)

 	(place-image
       BOMB
       (bomb-x (ws-bomb ws))
       (bomb-y (ws-bomb ws))
    (place-image
     UFO
     (ufo-x (ws-ufo ws))
     (ufo-y (ws-ufo ws))
    (place-image
      TANK
      (tank-x (ws-tank ws)) 
      TANKY
      MTSCN)))
 )

(check-expect (render-no-missile (make-ws (make-tank 300 0) 
                                          (make-ufo 100 200 0) 
                                          (make-missile 0 0 #false)
                                          (make-bomb 100 300)
                                          10))
	(place-image
	 BOMB
       100
       300	
    (place-image
     UFO
     100 200
     (place-image
      TANK
      300 TANKY
      MTSCN))))
    

;**end?
;if missile hits ufo or bomb hits tank or ufo gets too low, game over.
(define (end? ws)
  (or (<= (dfmu (ws-missile ws) (ws-ufo ws)) (/ (image-width UFO) 2))
      (<= (dfbt (ws-bomb ws) (ws-tank ws)) (/ (image-width TANK) 2))
      (>= (ufo-y (ws-ufo ws)) (- SCNHGT 10))))

;*** distance formula for missile to ufo
;x y x y -> distance
(define (dfmu missile ufo)
  (sqrt (+ (sqr (- (missile-x missile) (ufo-x ufo)))
           (sqr (- (missile-y missile) (ufo-y ufo)))
           )))

(check-expect (dfmu (make-missile 10 10 #true) (make-ufo 13 14 2)) 5)
;*** distance formula for bomb to tank
;x y x y -> distance
(define (dfbt bomb tank)
  (sqrt (+ (sqr (- (bomb-x bomb) (tank-x tank)))
           (sqr (- (bomb-y bomb) TANKY))
           )))

;bigbang
;main

(define (main ws)
 (big-bang ws
  [on-tick update-tick]
  [on-key update-key]
  [to-draw which-render]
  [stop-when end?]))

(main (make-ws (make-tank 500 0) 
               (make-ufo 100 0 0) 
               (make-missile 0 0 #false)
               (make-bomb 100 0)
               10))